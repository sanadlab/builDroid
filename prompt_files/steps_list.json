{
    "1": {
        "static_header": "Step 1: Create a container with an appropriate image that is suitable to install the project within.",
        "step_line": "- Use 'write_to_file' to create this Dockerfile:\n\nFROM ubuntu:22.04\n\nLABEL Description=\"This image provides a base Android development environment.\"\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# set default build arguments\nARG SDK_VERSION=commandlinetools-linux-11076708_latest.zip\nARG ANDROID_BUILD_VERSION=35\nARG ANDROID_TOOLS_VERSION=35.0.0\n\nENV ADB_INSTALL_TIMEOUT=10\nENV ANDROID_HOME=/opt/android\nENV ANDROID_SDK_ROOT=${ANDROID_HOME}\n\nENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64\nENV PATH=${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/emulator:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${PATH}\n\n# Install system dependencies\nRUN apt update -qq && apt install -qq -y --no-install-recommends \\\n        apt-transport-https \\\n        curl \\\n        file \\\n        git \\\n        libc++1-11 \\\n        libgl1 \\\n        make \\\n        openjdk-17-jdk-headless \\\n        patch \\\n        rsync \\\n        unzip \\\n        sudo \\\n        ninja-build \\\n        zip \\\n    && rm -rf /var/lib/apt/lists/*;\n\n# Download and install Android SDK command-line tools\nRUN curl -sS https://dl.google.com/android/repository/${SDK_VERSION} -o /tmp/sdk.zip \\\n    && mkdir -p ${ANDROID_HOME}/cmdline-tools \\\n    && unzip -q -d ${ANDROID_HOME}/cmdline-tools /tmp/sdk.zip \\\n    && mv ${ANDROID_HOME}/cmdline-tools/cmdline-tools ${ANDROID_HOME}/cmdline-tools/latest \\\n    && rm /tmp/sdk.zip \\\n    && yes | sdkmanager --licenses \\\n    && yes | sdkmanager \"platform-tools\" \\\n        \"platforms;android-$ANDROID_BUILD_VERSION\" \\\n        \"build-tools;$ANDROID_TOOLS_VERSION\" \\\n    && rm -rf ${ANDROID_HOME}/.android \\\n    && chmod 777 -R /opt/android\n\n# Set working directory\nWORKDIR /app\n\n# Copy project files\nCOPY . /app\n# Grant execute permissions to Gradle wrapper\nRUN chmod +x ./gradlew\n\n- Use the COPY command to transfer files from the host to the Docker image.\n- Once the Dockerfile is created, an automatic attempt to execute it and create the image will start. You will receive a message about the success or failure of creating the Docker image.\n- Do not include build and test steps as part of the Dockerfile, since the purpose of this step is image creation only.\n- If Docker images building is unsuccessful, determine the cause and rebuild by modifying the Dockerfile template above.",
        "result_of_step": []
    },
    "2": {
        "static_header": "Step 2: Attempt to build and run the project",
        "step_line": "- Your previous command of creating a dockerfile was successful, and you now have access to a running container, therefore all subsequent commands will be executed within the Docker container automatically. Now, if you haven't already done it, navigate to your project directory and run './gradlew assembleDebug' to build the project. If build fails, determine the cause of failure(ex. missing dependencies, outdated versions) and attempt to resolve it. The general guideline provides common gradle build errors and their solutions. Then try to build again, repeating the process of applying changes until the project builds successfully.",
        "result_of_step": []
    },
    "3": {
        "static_header": "Step 3: Merge installation steps to create a final dockerfile.",
        "step_line": "- Your previous commands of building the project were successful, and now you have your list of commands. Use 'write_to_file' to save commands into 'Dockerfile.final'.\n- Always create the installation script(such as './gradlew assembleDebug') at the end of final Dockerfile.\n- Do not try to execute the installation script during the process or attempt to set up everything using the script; instead, use 'linux_terminal'.",
        "result_of_step": []
    }
}
