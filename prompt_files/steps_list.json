{
    "1": {
        "static_header": "Step 1: Gather project dependenciesm Check and Update Environment Versions",
        "step_line": "- Use 'linux_terminal' to list files and identify relevant files. While reading, NEVER include project path in file path since the command is running in the working directory.\n- Read relevant files using 'read_file' such as `README.md`.",
        "result_of_step": []
    },
    "2": {
        "static_header": "Step 2: Create a container with an appropriate image that is suitable to install the project within.",
        "step_line": "- Use 'write_to_file' to create the 'Dockerfile'.\n- The Dockerfile should always clone the target repository. Do not use the COPY command to transfer files from the host to the Docker image.\n- The script should enable pulling a Docker image, cloning the target repository inside it, installing dependencies. Use 'write_to_file'.\nExample template of Dockerfile:\n\n\nFROM ubuntu:22.04\n\nLABEL Description=\"This image provides a base Android development environment.\"\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# set default build arguments\nARG SDK_VERSION=commandlinetools-linux-11076708_latest.zip\nARG ANDROID_BUILD_VERSION=35\nARG ANDROID_TOOLS_VERSION=35.0.0\n\nENV ADB_INSTALL_TIMEOUT=10\nENV ANDROID_HOME=/opt/android\nENV ANDROID_SDK_ROOT=${ANDROID_HOME}\n\nENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64\nENV PATH=${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/emulator:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${PATH}\n\n# Install system dependencies\nRUN apt update -qq && apt install -qq -y --no-install-recommends \\\n        apt-transport-https \\\n        curl \\\n        file \\\n        git \\\n        libc++1-11 \\\n        libgl1 \\\n        make \\\n        openjdk-17-jdk-headless \\\n        patch \\\n        rsync \\\n        unzip \\\n        sudo \\\n        ninja-build \\\n        zip \\\n    && rm -rf /var/lib/apt/lists/*;\n\n# Download and install Android SDK command-line tools\nRUN curl -sS https://dl.google.com/android/repository/${SDK_VERSION} -o /tmp/sdk.zip \\\n    && mkdir -p ${ANDROID_HOME}/cmdline-tools \\\n    && unzip -q -d ${ANDROID_HOME}/cmdline-tools /tmp/sdk.zip \\\n    && mv ${ANDROID_HOME}/cmdline-tools/cmdline-tools ${ANDROID_HOME}/cmdline-tools/latest \\\n    && rm /tmp/sdk.zip \\\n    && yes | sdkmanager --licenses \\\n    && yes | sdkmanager \"platform-tools\" \\\n        \"platforms;android-$ANDROID_BUILD_VERSION\" \\\n        \"build-tools;$ANDROID_TOOLS_VERSION\" \\\n    && rm -rf ${ANDROID_HOME}/.android \\\n    && chmod 777 -R /opt/android\n\n# Set working directory\nWORKDIR /app\n\n# Copy project files\nCOPY . /app\n# Grant execute permissions to Gradle wrapper\nRUN chmod +x ./gradlew\n\n- Once the Dockerfile is created, an automatic attempt to execute it and create the image will start. You will receive a message about the success or failure of creating the Docker image.\n- If the Docker image is created successfully, all subsequent commands will be executed within the Docker container automatically. Therefore DO NOT create duplicate dockerfiles until you successfully build the project.\n- Avoid including build and test steps as part of the Dockerfile to reduce errors during image creation.",
        "result_of_step": []
    },
    "3": {
        "static_header": "Step 3: Attempt to build and run the project",
        "step_line": "- Once you have access to a running container, navigate to your project directory and run './gradlew assembleDebug' to build the project. If build fails, determine the cause of failure(ex. missing dependencies, outdated versions) and attempt to resolve it. The general guideline provides common gradle build errors and their solutions. Then try to build again, repeating the process of applying changes until the project builds successfully.",
        "result_of_step": []
    },
    "4": {
        "static_header": "Step 4: Merge installation steps to create a final dockerfile.",
        "step_line": "- Once you successfully build the project, use 'write_to_file' to save commands into 'Dockerfile'.\n- Always create the installation script at the end, after successfully running test cases.\n- Do not try to execute the installation script during the process or attempt to set up everything using the script; instead, use 'linux_terminal'.",
        "result_of_step": []
    }
}
